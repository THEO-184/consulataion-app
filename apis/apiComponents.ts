/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type AppControllerGetHelloError = Fetcher.ErrorWrapper<undefined>;

export type AppControllerGetHelloVariables = ApiContext["fetcherOptions"];

export const fetchAppControllerGetHello = (
  variables: AppControllerGetHelloVariables,
  signal?: AbortSignal,
) =>
  apiFetch<string, AppControllerGetHelloError, undefined, {}, {}, {}>({
    url: "/",
    method: "get",
    ...variables,
    signal,
  });

export const useAppControllerGetHello = <TData = string,>(
  variables: AppControllerGetHelloVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<string, AppControllerGetHelloError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<string, AppControllerGetHelloError, TData>({
    queryKey: queryKeyFn({
      path: "/",
      operationId: "appControllerGetHello",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAppControllerGetHello({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type PatientControllerGetMyConsultationError =
  Fetcher.ErrorWrapper<undefined>;

export type PatientControllerGetMyConsultationVariables =
  ApiContext["fetcherOptions"];

export const fetchPatientControllerGetMyConsultation = (
  variables: PatientControllerGetMyConsultationVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GetPatientConsultationResponseDto,
    PatientControllerGetMyConsultationError,
    undefined,
    {},
    {},
    {}
  >({ url: "/patient/consultations", method: "get", ...variables, signal });

export const usePatientControllerGetMyConsultation = <
  TData = Schemas.GetPatientConsultationResponseDto,
>(
  variables: PatientControllerGetMyConsultationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GetPatientConsultationResponseDto,
      PatientControllerGetMyConsultationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.GetPatientConsultationResponseDto,
    PatientControllerGetMyConsultationError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/patient/consultations",
      operationId: "patientControllerGetMyConsultation",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchPatientControllerGetMyConsultation(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type AuthControllerOfficerLoginError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerOfficerLoginVariables = {
  body: Schemas.LoginOfficerDto;
} & ApiContext["fetcherOptions"];

export const fetchAuthControllerOfficerLogin = (
  variables: AuthControllerOfficerLoginVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.LoginOfficerResponseDto,
    AuthControllerOfficerLoginError,
    Schemas.LoginOfficerDto,
    {},
    {},
    {}
  >({ url: "/auth/login/officer", method: "post", ...variables, signal });

export const useAuthControllerOfficerLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.LoginOfficerResponseDto,
      AuthControllerOfficerLoginError,
      AuthControllerOfficerLoginVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.LoginOfficerResponseDto,
    AuthControllerOfficerLoginError,
    AuthControllerOfficerLoginVariables
  >({
    mutationFn: (variables: AuthControllerOfficerLoginVariables) =>
      fetchAuthControllerOfficerLogin({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AuthControllerPatientLoginError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerPatientLoginVariables = {
  body: Schemas.PatientLoginDto;
} & ApiContext["fetcherOptions"];

export const fetchAuthControllerPatientLogin = (
  variables: AuthControllerPatientLoginVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.LoginPatientResponseDto,
    AuthControllerPatientLoginError,
    Schemas.PatientLoginDto,
    {},
    {},
    {}
  >({ url: "/auth/login/patient", method: "post", ...variables, signal });

export const useAuthControllerPatientLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.LoginPatientResponseDto,
      AuthControllerPatientLoginError,
      AuthControllerPatientLoginVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.LoginPatientResponseDto,
    AuthControllerPatientLoginError,
    AuthControllerPatientLoginVariables
  >({
    mutationFn: (variables: AuthControllerPatientLoginVariables) =>
      fetchAuthControllerPatientLogin({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ConsultationControllerBookConsultationError =
  Fetcher.ErrorWrapper<undefined>;

export type ConsultationControllerBookConsultationVariables = {
  body: Schemas.CreateConsultationDto;
} & ApiContext["fetcherOptions"];

export const fetchConsultationControllerBookConsultation = (
  variables: ConsultationControllerBookConsultationVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.BookConsultationResponseDto,
    ConsultationControllerBookConsultationError,
    Schemas.CreateConsultationDto,
    {},
    {},
    {}
  >({ url: "/consultation", method: "post", ...variables, signal });

export const useConsultationControllerBookConsultation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.BookConsultationResponseDto,
      ConsultationControllerBookConsultationError,
      ConsultationControllerBookConsultationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.BookConsultationResponseDto,
    ConsultationControllerBookConsultationError,
    ConsultationControllerBookConsultationVariables
  >({
    mutationFn: (variables: ConsultationControllerBookConsultationVariables) =>
      fetchConsultationControllerBookConsultation({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ConsultationControllerGetPatientConsultationQueryParams = {
  date?: string;
  patientName?: string;
  healthcareProvider?: string;
  consultationType?: string;
  medicalCondition?: string;
};

export type ConsultationControllerGetPatientConsultationError =
  Fetcher.ErrorWrapper<undefined>;

export type ConsultationControllerGetPatientConsultationVariables = {
  queryParams?: ConsultationControllerGetPatientConsultationQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchConsultationControllerGetPatientConsultation = (
  variables: ConsultationControllerGetPatientConsultationVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GetPatientConsultationResponseDto,
    ConsultationControllerGetPatientConsultationError,
    undefined,
    {},
    ConsultationControllerGetPatientConsultationQueryParams,
    {}
  >({ url: "/consultation", method: "get", ...variables, signal });

export const useConsultationControllerGetPatientConsultation = <
  TData = Schemas.GetPatientConsultationResponseDto,
>(
  variables: ConsultationControllerGetPatientConsultationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GetPatientConsultationResponseDto,
      ConsultationControllerGetPatientConsultationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.GetPatientConsultationResponseDto,
    ConsultationControllerGetPatientConsultationError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/consultation",
      operationId: "consultationControllerGetPatientConsultation",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchConsultationControllerGetPatientConsultation(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type HealthcareProvidersControllerFindAllError =
  Fetcher.ErrorWrapper<undefined>;

export type HealthcareProvidersControllerFindAllVariables =
  ApiContext["fetcherOptions"];

export const fetchHealthcareProvidersControllerFindAll = (
  variables: HealthcareProvidersControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    HealthcareProvidersControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/healthcare-providers", method: "get", ...variables, signal });

export const useHealthcareProvidersControllerFindAll = <TData = undefined,>(
  variables: HealthcareProvidersControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      HealthcareProvidersControllerFindAllError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    undefined,
    HealthcareProvidersControllerFindAllError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/healthcare-providers",
      operationId: "healthcareProvidersControllerFindAll",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchHealthcareProvidersControllerFindAll(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type HealthcareProvidersControllerFindOnePathParams = {
  id: string;
};

export type HealthcareProvidersControllerFindOneError =
  Fetcher.ErrorWrapper<undefined>;

export type HealthcareProvidersControllerFindOneVariables = {
  pathParams: HealthcareProvidersControllerFindOnePathParams;
} & ApiContext["fetcherOptions"];

export const fetchHealthcareProvidersControllerFindOne = (
  variables: HealthcareProvidersControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    string,
    HealthcareProvidersControllerFindOneError,
    undefined,
    {},
    {},
    HealthcareProvidersControllerFindOnePathParams
  >({ url: "/healthcare-providers/{id}", method: "get", ...variables, signal });

export const useHealthcareProvidersControllerFindOne = <TData = string,>(
  variables: HealthcareProvidersControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      string,
      HealthcareProvidersControllerFindOneError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    string,
    HealthcareProvidersControllerFindOneError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/healthcare-providers/{id}",
      operationId: "healthcareProvidersControllerFindOne",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchHealthcareProvidersControllerFindOne(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type HealthcareProvidersControllerRemovePathParams = {
  id: string;
};

export type HealthcareProvidersControllerRemoveError =
  Fetcher.ErrorWrapper<undefined>;

export type HealthcareProvidersControllerRemoveVariables = {
  pathParams: HealthcareProvidersControllerRemovePathParams;
} & ApiContext["fetcherOptions"];

export const fetchHealthcareProvidersControllerRemove = (
  variables: HealthcareProvidersControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    string,
    HealthcareProvidersControllerRemoveError,
    undefined,
    {},
    {},
    HealthcareProvidersControllerRemovePathParams
  >({
    url: "/healthcare-providers/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export const useHealthcareProvidersControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      string,
      HealthcareProvidersControllerRemoveError,
      HealthcareProvidersControllerRemoveVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    string,
    HealthcareProvidersControllerRemoveError,
    HealthcareProvidersControllerRemoveVariables
  >({
    mutationFn: (variables: HealthcareProvidersControllerRemoveVariables) =>
      fetchHealthcareProvidersControllerRemove({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type QueryOperation =
  | {
      path: "/";
      operationId: "appControllerGetHello";
      variables: AppControllerGetHelloVariables;
    }
  | {
      path: "/patient/consultations";
      operationId: "patientControllerGetMyConsultation";
      variables: PatientControllerGetMyConsultationVariables;
    }
  | {
      path: "/consultation";
      operationId: "consultationControllerGetPatientConsultation";
      variables: ConsultationControllerGetPatientConsultationVariables;
    }
  | {
      path: "/healthcare-providers";
      operationId: "healthcareProvidersControllerFindAll";
      variables: HealthcareProvidersControllerFindAllVariables;
    }
  | {
      path: "/healthcare-providers/{id}";
      operationId: "healthcareProvidersControllerFindOne";
      variables: HealthcareProvidersControllerFindOneVariables;
    };
